----------------------------------------------------------------------------
Mon Nov 11 13:49:33 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 11. 11 월	   C++월56수34			 (11주 1일)
//
// 클래스 간의 관계 - 상속
//	1. 기존 코드를 재사요한다
//	2. 다형성을 구현한다
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

class A{

};

class B {
	A a;
	A b[10];
	A* c;

	void f(A);
	A f();
};

int main()
{
	
	
	save ("소스.cpp");
}


----------------------------------------------------------------------------
Mon Nov 11 14:07:56 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 11. 11 월	   C++월56수34			 (11주 1일)
//
// 클래스 간의 관계 - 상속
//	1. 기존 코드를 재사요한다
//	2. 다형성을 구현한다
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

class Animal {
	string name;
public:
	void move ( ) {
		cout << "모든 동물은 움직인다" << endl;
	}
};

class Dog : public Animal {
	
};


int main()
{
	Dog d;

	cout << sizeof(Dog);
	
	save ("소스.cpp");
}


----------------------------------------------------------------------------
Mon Nov 11 14:08:20 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 11. 11 월	   C++월56수34			 (11주 1일)
//
// 클래스 간의 관계 - 상속
//	1. 기존 코드를 재사요한다
//	2. 다형성을 구현한다
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

class Animal {
	string name;
public:
	void move ( ) {
		cout << "모든 동물은 움직인다" << endl;
	} 	
};

class Dog : public Animal {
	int color;
};


int main()
{
	Dog d;

	cout << sizeof(Dog) << endl;
	
	save ("소스.cpp");
}


----------------------------------------------------------------------------
Mon Nov 11 14:19:45 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 11. 11 월	   C++월56수34			 (11주 1일)
//
// 클래스 간의 관계 - 상속
//	1. 기존 코드를 재사요한다
//	2. 다형성을 구현한다
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

class Animal {
	string name;		//protected:	// 자식 클래스의 private으로 사용가능하다
public:
	Animal ( string s ) : name{ s } {}

	void move ( ) {
		cout << name << " 움직인다" << endl;
	}
};

class Dog : public Animal {
public:
	Dog ( string s ) : Animal(s) {
		
	}
};


int main()
{
	Dog d{ "댕댕이" };
	
	d.move();
	
	save ("소스.cpp");
}


----------------------------------------------------------------------------
Mon Nov 11 14:37:39 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 11. 11 월	   C++월56수34			 (11주 1일)
//
// 클래스 간의 관계 - 상속
//	1. 기존 코드를 재사요한다
//	2. 다형성을 구현한다
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

class Animal {
	string name;			//protected: - 자식 클래스의 private으로 사용가능하다
public:
	Animal ( string s ) : name{ s } {}

	void move ( ) {
		cout << name << " 움직인다" << endl;
	}
};

class Dog : public Animal {	// Dog is a Animal ( is - a relationship )
							// inheritance 관계
							// 조상의 메모리를 모두 포함한다
public:
	Dog ( string s ) : Animal(s) {}

};


int main()
{
	Dog d{ "댕댕이" };
	Dog x{ "진돌이" };

	d.move();
	x.move();
	
	save ("소스.cpp");
}


----------------------------------------------------------------------------
Mon Nov 11 14:39:45 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 11. 11 월	   C++월56수34			 (11주 1일)
//
// 클래스 간의 관계 - 상속
//	1. 기존 코드를 재사요한다
//	2. 다형성을 구현한다
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

class Animal {
	string name;			//protected: - 자식 클래스의 private으로 사용가능하다
public:
	Animal ( string s ) : name{ s } {}

	void move ( ) {
		cout << this->name << " 움직인다" << endl;
	}
};

class Dog : public Animal {	// Dog is a Animal ( is - a relationship )
							// inheritance 관계
							// 조상의 메모리를 모두 포함한다
public:
	Dog ( string s ) : Animal(s) {}

};


int main()
{
	Dog d{ "댕댕이" };
	Dog x{ "진돌이" };

	d.move();
	x.move();
	
	save ("소스.cpp");
}


----------------------------------------------------------------------------
Mon Nov 11 15:00:04 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 11. 11 월	   C++월56수34			 (11주 1일)
//
// 클래스 간의 관계 - 상속
//	1. 기존 코드를 재사요한다
//	2. 다형성을 구현한다
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

//  Animal	( int age, string name ), move()
//	  /\
//	 /  \
// Dog  Bird
//(달리기) (날기)

class Animal {
protected:
	int age;
	string name;
public:
};

class Dog : public Animal {
public:
	Dog ( string s, int n ) {
		name = s;
		age = n;
	}

	void move ( ) {
		cout << name << " 달린다" <<endl;
	}
};

class Bird : public Animal {
public:
	Bird ( string s, int n ) {
		name = s;
		age = n;
	}

	void move ( ) {
		cout << name << " 난다" << endl;
	}
};

int main()
{
	Dog d {"진돌이", 3};
	Bird b {"양진이", 5};

	d.move();	// 진돌이 달린다
	b.move();	// 양진이 난다

	save ("소스.cpp");
}


----------------------------------------------------------------------------
Mon Nov 11 15:02:39 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 11. 11 월	   C++월56수34			 (11주 1일)
//
// 클래스 간의 관계 - 상속
//	1. 기존 코드를 재사요한다
//	2. 다형성을 구현한다
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

//  Animal	( int age, string name ), move()
//	  /\
//	 /  \
// Dog  Bird
//(달리기) (날기)

class Animal {
	int age;
	string name;
public:
	Animal ( string s, int n ) : name{ s }, age{ n }{}
	void move ( )
	{
		cout << name;
	}
};

class Dog : public Animal {
public:
	Dog ( string s, int n ) : Animal(s,n) {
	}

	void move ( ) {
		Animal::move();
		cout << " 달린다" <<endl;
	}
};

class Bird : public Animal {
public:
	Bird ( string s, int n ) : Animal ( s, n ) {
	}

	void move ( ) {
		Animal::move();
		cout << " 난다" << endl;
	}
};

int main()
{
	Dog d {"진돌이", 3};
	Bird b {"양진이", 5};

	d.move();	// 진돌이 달린다
	b.move();	// 양진이 난다

	save ("소스.cpp");
}


----------------------------------------------------------------------------
Mon Nov 11 15:11:20 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 11. 11 월	   C++월56수34			 (11주 1일)
//
// 클래스 간의 관계 - 상속
//	1. 기존 코드를 재사요한다
//	2. 다형성을 구현한다
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

class Animal {
	string name;
public:
	Animal ( string s ) : name{ s } {
		cout << "Animal 생성" << endl;
	}

	~Animal ( ) {
		cout << "Animal 소멸" << endl; 
	}
};

class Dog : public Animal {
public:
	Dog ( string s ) : Animal(s) {
		cout << "Dog 생성" << endl;
	}

	~Dog ( ) {
		cout << "Dog 소멸" << endl; 
	}
};


int main()
{
	// [문제] d의 생성과 소멸을 관찰하라

	Dog d{ "진돌이" };
	

	save ("소스.cpp");
}


----------------------------------------------------------------------------
Mon Nov 11 15:12:02 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 11. 11 월	   C++월56수34			 (11주 1일)
//
// 클래스 간의 관계 - 상속
//	1. 기존 코드를 재사요한다
//	2. 다형성을 구현한다
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

class Animal {
	string name;
public:
	Animal ( string s ) : name{ s } {
		cout << "Animal 생성" << endl;
	}

	~Animal ( ) {
		cout << "Animal 소멸" << endl; 
	}
};

class Dog : public Animal {
public:
	Dog ( string s ) : Animal(s) {
		cout << "Dog 생성" << endl;
	}

	~Dog ( ) {
		cout << "Dog 소멸" << endl; 
	}
};


int main()
{
	// [문제] d의 생성과 소멸을 관찰하라

	Dog d[2]{ { "진돌이" }, { "삽살이" } };
	

	save ("소스.cpp");
}


----------------------------------------------------------------------------
Mon Nov 11 15:13:22 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 11. 11 월	   C++월56수34			 (11주 1일)
//
// 클래스 간의 관계 - 상속
//	1. 기존 코드를 재사요한다
//	2. 다형성을 구현한다
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

class Animal {
	string name;
public:
	Animal ( string s ) : name{ s } {
		cout << "Animal 생성" << endl;
	}

	~Animal ( ) {
		cout << "Animal 소멸" << endl; 
	}
};

class Dog : public Animal {
public:
	Dog ( string s ) : Animal(s) {
		cout << "Dog 생성" << endl;
	}

	~Dog ( ) {
		cout << "Dog 소멸" << endl; 
	}
};


int main()
{
	// [문제] d의 생성과 소멸을 관찰하라

	Dog* p = new Dog[2]{ { "진돌이" }, { "삽살이" } };
	

	save ("소스.cpp");

	delete[] p;
}


----------------------------------------------------------------------------
Mon Nov 11 15:14:07 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 11. 11 월	   C++월56수34			 (11주 1일)
//
// 클래스 간의 관계 - 상속
//	1. 기존 코드를 재사요한다
//	2. 다형성을 구현한다
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

class Animal {
	string name;
public:
	Animal ( string s ) : name{ s } {
		cout << "Animal 생성 - " << name << endl;
	}

	~Animal ( ) {
		cout << "Animal 소멸 - " << name << endl; 
	}
};

class Dog : public Animal {
public:
	Dog ( string s ) : Animal(s) {
		cout << "Dog 생성" << endl;
	}

	~Dog ( ) {
		cout << "Dog 소멸" << endl; 
	}
};


int main()
{
	// [문제] d의 생성과 소멸을 관찰하라

	Dog* p = new Dog[2]{ { "진돌이" }, { "삽살이" } };
	

	save ("소스.cpp");

	delete[] p;
}


----------------------------------------------------------------------------
Mon Nov 11 15:19:16 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 11. 11 월	   C++월56수34			 (11주 1일)
//
// 클래스 간의 관계 - 상속
//	1. 기존 코드를 재사요한다
//	2. 다형성을 구현한다
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;


class Animal {

public:
	void move ( ) const {
		cout << "진돌이 ";
	};
};

class Dog : public Animal {
public:
	void move ( ) const {		// 조상의 함수를 재정의(override)
								// 함수 overload와 구분하자
		cout << "달린다"<< endl;
	}
};


int main()
{
	

	save ("소스.cpp");
}


----------------------------------------------------------------------------
Mon Nov 11 15:19:42 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 11. 11 월	   C++월56수34			 (11주 1일)
//
// 클래스 간의 관계 - 상속
//	1. 기존 코드를 재사요한다
//	2. 다형성을 구현한다
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;


class Animal {

public:
	virtual void move ( ) const {
		cout << "진돌이 ";
	};
};

class Dog : public Animal {
public:
	void move ( ) const override {	// 조상의 함수를 재정의(override)
									// 함수 overload와 구분하자
		cout << "달린다"<< endl;
	}
};


int main()
{
	

	save ("소스.cpp");
}