


----------------------------------------------------------------------------
Wed Oct  9 11:49:14 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 09 월 C++                           월56수34          (6주 2일)
//
// 사용자 정의 자료형(User-Defined Data type)
//  - 1, 2, 4, 8 보다 큰 메모리가 필요해서
//  - POD 가지고 프로그램하기엔 규모도 크고 이해가 어렵고 등등...
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include "save.h"

using namespace std;

// [다음시간] Vertex 1000개 만들고
// 좌표(0, 0, 0)에 폭탄이 떨어진다 가정하자
// 폭탄 반경 100m 이내의 정점을 화면에 출력하라

struct Vertex {
	float x;
	float y;
	float z;
};

Vertex points[ 1000 ];

int main()
{
	// Vertex를 1000개 만든다
	// - 크기가 커서 전역변수로 만들었다

	// 적절한 값을 설정해 보자( 0~500, 0~500, 0~10 )
	default_random_engine dre;
	uniform_int_distribution<int> uidx { 0, 500 };
	uniform_int_distribution<int> uidy { 0, 500 };
	uniform_int_distribution<int> uidz { 0, 10 };

	for( int i = 0; i < 1000; ++i )
	{
		points[ i ].x = uidx( dre );
		points[ i ].y = uidy( dre );
		points[ i ].z = uidz( dre );
	}
	
	for( Vertex p : points )		// const Vertex& p ?
		cout << "(" << p.x << "," << p.y << "," << p.z << ")" << endl;


	// 폭탄(0,0,0)과의 거리가 100이하인 점을 계산하여 출력한다


	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Wed Oct  9 11:56:52 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 09 월 C++                           월56수34          (6주 2일)
//
// 사용자 정의 자료형(User-Defined Data type)
//  - 1, 2, 4, 8 보다 큰 메모리가 필요해서
//  - POD 가지고 프로그램하기엔 규모도 크고 이해가 어렵고 등등...
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include "save.h"

using namespace std;

// [다음시간] Vertex 1000개 만들고
// 좌표(0, 0, 0)에 폭탄이 떨어진다 가정하자
// 폭탄 반경 100m 이내의 정점을 화면에 출력하라

struct Vertex {
	float x;
	float y;
	float z;
};

Vertex points[ 1000 ];

int main()
{
	// Vertex를 1000개 만든다
	// - 크기가 커서 전역변수로 만들었다

	// 적절한 값을 설정해 보자( 0~500, 0~500, 0~10 )
	default_random_engine dre;
	uniform_int_distribution<int> uidx { 0, 500 };
	uniform_int_distribution<int> uidy { 0, 500 };
	uniform_int_distribution<int> uidz { 0, 10 };

	for( int i = 0; i < 1000; ++i )
	{
		points[ i ].x = uidx( dre );
		points[ i ].y = uidy( dre );
		points[ i ].z = uidz( dre );
	}
	
	int cnt {};

	for( Vertex p : points )
	{
		if( sqrt( p.x * p.x + p.y * p.y + p.z * p.z ) <= 100 )
		{
			cout << "(" << p.x << "," << p.y << "," << p.z << ")" << endl;
			cnt++;
		}
	}



//	for( Vertex p : points )		// const Vertex& p ?
//		cout << "(" << p.x << "," << p.y << "," << p.z << ")" << endl;


	// 폭탄(0,0,0)과의 거리가 100이하인 점을 계산하여 출력하자
	// 모두 몇 개인지도 출력하자


	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Wed Oct  9 11:57:31 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 09 월 C++                           월56수34          (6주 2일)
//
// 사용자 정의 자료형(User-Defined Data type)
//  - 1, 2, 4, 8 보다 큰 메모리가 필요해서
//  - POD 가지고 프로그램하기엔 규모도 크고 이해가 어렵고 등등...
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include "save.h"

using namespace std;

// [다음시간] Vertex 1000개 만들고
// 좌표(0, 0, 0)에 폭탄이 떨어진다 가정하자
// 폭탄 반경 100m 이내의 정점을 화면에 출력하라

struct Vertex {
	float x;
	float y;
	float z;
};

Vertex points[ 1000 ];

int main()
{
	// Vertex를 1000개 만든다
	// - 크기가 커서 전역변수로 만들었다

	// 적절한 값을 설정해 보자( 0~500, 0~500, 0~10 )
	default_random_engine dre;
	uniform_int_distribution<int> uidx { 0, 500 };
	uniform_int_distribution<int> uidy { 0, 500 };
	uniform_int_distribution<int> uidz { 0, 10 };

	for( int i = 0; i < 1000; ++i )
	{
		points[ i ].x = uidx( dre );
		points[ i ].y = uidy( dre );
		points[ i ].z = uidz( dre );
	}
	
	int cnt {};

	for( Vertex p : points )
	{
		if( sqrt( p.x * p.x + p.y * p.y + p.z * p.z ) <= 100 )
		{
			cout << "(" << p.x << "," << p.y << "," << p.z << ")" << endl;
			cnt++;
		}
	}

	cout << "반경 100 이내의 점은 모두 " << cnt << "개" << endl;

//	for( Vertex p : points )		// const Vertex& p ?
//		cout << "(" << p.x << "," << p.y << "," << p.z << ")" << endl;


	// 폭탄(0,0,0)과의 거리가 100이하인 점을 계산하여 출력하자
	// 모두 몇 개인지도 출력하자


	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Wed Oct  9 12:03:46 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 09 월 C++                           월56수34          (6주 2일)
//
// 사용자 정의 자료형(User-Defined Data type)
//  - 어떤 자료형이라도 새로운 이름으로 묶을 수 있다(struct, class)
//  - 묶인 자료는 메모리를 얼마나 차지하나?
//  - 묶어 사용할때(생성, 대입, 복사, 소멸) 어떤 일이 일어나나?
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

struct Vertex {
	float x;
	float y;
	float z;
};

int main()
{
	Vertex a;	// 이때 무슨 일이 일어나나?

	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Wed Oct  9 12:04:50 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 09 월 C++                           월56수34          (6주 2일)
//
// 사용자 정의 자료형(User-Defined Data type)
//  - 어떤 자료형이라도 새로운 이름으로 묶을 수 있다(struct, class)
//  - 묶인 자료는 메모리를 얼마나 차지하나?
//  - 묶어 사용할때(생성, 대입, 복사, 소멸) 어떤 일이 일어나나?
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

struct Vertex {
	float x;
	float y;
	float z;
};

int main()
{
	Vertex a;	// 이때 무슨 일이 일어나나?

	// 사용자가 정의한 자료형이 차지하는 메모리 바이트 수

	cout << sizeof( Vertex ) << endl;

	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Wed Oct  9 12:05:20 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 09 월 C++                           월56수34          (6주 2일)
//
// 사용자 정의 자료형(User-Defined Data type)
//  - 어떤 자료형이라도 새로운 이름으로 묶을 수 있다(struct, class)
//  - 묶인 자료는 메모리를 얼마나 차지하나?
//  - 묶어 사용할때(생성, 대입, 복사, 소멸) 어떤 일이 일어나나?
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

struct Vertex {
	float x;
	float y;
	float z;

	float a;
	float b;
};

int main()
{
	Vertex a;	// 이때 무슨 일이 일어나나?

	// 사용자가 정의한 자료형이 차지하는 메모리 바이트 수

	cout << sizeof( Vertex ) << endl;

	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Wed Oct  9 12:05:42 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 09 월 C++                           월56수34          (6주 2일)
//
// 사용자 정의 자료형(User-Defined Data type)
//  - 어떤 자료형이라도 새로운 이름으로 묶을 수 있다(struct, class)
//  - 묶인 자료는 메모리를 얼마나 차지하나?
//  - 묶어 사용할때(생성, 대입, 복사, 소멸) 어떤 일이 일어나나?
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

struct Vertex {
	float x;
	float y;
	float z;

	float a;
	float b;
	char c;
};

int main()
{
	Vertex a;	// 이때 무슨 일이 일어나나?

	// 사용자가 정의한 자료형이 차지하는 메모리 바이트 수

	cout << sizeof( Vertex ) << endl;

	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Wed Oct  9 12:09:01 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 09 월 C++                           월56수34          (6주 2일)
//
// 사용자 정의 자료형(User-Defined Data type)
//  - 어떤 자료형이라도 새로운 이름으로 묶을 수 있다(struct, class)
//  - 묶인 자료는 메모리를 얼마나 차지하나?
//  - 묶어 사용할때(생성, 대입, 복사, 소멸) 어떤 일이 일어나나?
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

struct Vertex {		// 사용자 자료형의 크기
	float x; // 4
	float y; // 4
	float z; // 4

	char c; // 1
};

int main()
{
	Vertex a;	// 이때 무슨 일이 일어나나?

	// 사용자가 정의한 자료형이 차지하는 메모리 바이트 수

	cout << sizeof( Vertex ) << endl;

	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Wed Oct  9 12:11:05 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 09 월 C++                           월56수34          (6주 2일)
//
// 사용자 정의 자료형(User-Defined Data type)
//  - 어떤 자료형이라도 새로운 이름으로 묶을 수 있다(struct, class)
//  - 묶인 자료는 메모리를 얼마나 차지하나?
//  - 묶어 사용할때(생성, 대입, 복사, 소멸) 어떤 일이 일어나나?
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

struct alignas( 64 ) Vertex {		// 사용자 자료형의 크기
	float x; // 4
	float y; // 4
	float z; // 4

	char c; // 1
};

int main()
{
	Vertex a[1000];	// 이때 무슨 일이 일어나나?

	// 사용자가 정의한 자료형이 차지하는 메모리 바이트 수

	cout << sizeof( Vertex ) << endl;

	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Wed Oct  9 12:14:02 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 09 월 C++                           월56수34          (6주 2일)
//
// 사용자 정의 자료형(User-Defined Data type)
//  - 어떤 자료형이라도 새로운 이름으로 묶을 수 있다(struct, class)
//  - 묶인 자료는 메모리를 얼마나 차지하나?
//	 -> 속도를 위해 메모리를 더 많이 사용한다.
//  - 묶어 사용할때(생성, 대입, 복사, 소멸) 어떤 일이 일어나나?
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

struct Vertex {		// 사용자 자료형의 크기
	float x; // 4
	float y; // 4
	float z; // 4

	char c; // 1 --> 4 메모리를 더 잡아서 속도를 이득봄
};

int main()
{
	Vertex a[1000];	// 이때 무슨 일이 일어나나?

	// 사용자가 정의한 자료형이 차지하는 메모리 바이트 수

	cout << sizeof( Vertex ) << endl;

	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Wed Oct  9 12:38:00 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 09 월 C++                           월56수34          (6주 2일)
//
// 사용자 정의 자료형(User-Defined Data type)
//  - 어떤 자료형이라도 새로운 이름으로 묶을 수 있다(struct, class)
//  - 묶인 자료는 메모리를 얼마나 차지하나?
//	 -> 속도를 위해 메모리를 더 많이 사용한다.
//  - 묶어 사용할때(생성, 대입, 복사, 소멸) 어떤 일이 일어나나?
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

struct Vertex {	
	float x;
	float y;
	float z;

	char c;
};

int main()
{
	int    n {};	// default 초기화, POD에서는 int n { 0 };

	Vertex a { };	// 메모리를 sizeof(Vertex) 만큼 확보하고 
					// 디폴트 생성자(default constructor)를 호출한다.
	// 현재 이 코드가 실행되는 것은 
	// 컴파일러가 디폴트 생서자를 만들기 때문
	// 사용자가 안 만들면 만들어 주기 때문 - special member funtion
	
	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Wed Oct  9 12:43:25 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 09 월 C++                           월56수34          (6주 2일)
//
// 사용자 정의 자료형(User-Defined Data type)
//  - 어떤 자료형이라도 새로운 이름으로 묶을 수 있다(struct, class)
//  - 묶인 자료는 메모리를 얼마나 차지하나?
//	 -> 속도를 위해 메모리를 더 많이 사용한다.
//  - 묶어 사용할때(생성, 대입, 복사, 소멸) 어떤 일이 일어나나?
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

struct Vertex {	
	float x;
	float y;
	float z;

	// 디폴트 생성자함수( default ctor)
	Vertex() :  x{3}, y{3}, z{3}
	{
		cout << "디폴트 생성자가 호출되었다" << endl;
	}
};

int main()
{
	Vertex a { };
	Vertex b;

	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Wed Oct  9 12:43:55 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 09 월 C++                           월56수34          (6주 2일)
//
// 사용자 정의 자료형(User-Defined Data type)
//  - 어떤 자료형이라도 새로운 이름으로 묶을 수 있다(struct, class)
//  - 묶인 자료는 메모리를 얼마나 차지하나?
//	 -> 속도를 위해 메모리를 더 많이 사용한다.
//  - 묶어 사용할때(생성, 대입, 복사, 소멸) 어떤 일이 일어나나?
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

struct Vertex {	
	float x;
	float y;
	float z;

	// 디폴트 생성자함수( default ctor)
	Vertex() :  x{3}, y{3}, z{3}
	{
		cout << "디폴트 생성자가 호출되었다" << endl;
	}
};

int main()
{
	Vertex a[ 10 ];

	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Wed Oct  9 12:44:41 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 09 월 C++                           월56수34          (6주 2일)
//
// 사용자 정의 자료형(User-Defined Data type)
//  - 어떤 자료형이라도 새로운 이름으로 묶을 수 있다(struct, class)
//  - 묶인 자료는 메모리를 얼마나 차지하나?
//	 -> 속도를 위해 메모리를 더 많이 사용한다.
//  - 묶어 사용할때(생성, 대입, 복사, 소멸) 어떤 일이 일어나나?
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

struct Vertex {	
	float x;
	float y;
	float z;

	// 디폴트 생성자함수( default ctor)
	Vertex() :  x{3}, y{3}, z{3}
	{
		cout << "디폴트 생성자가 호출되었다" << endl;
	}
};

int main()
{
	new Vertex [ 10 ];

	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Wed Oct  9 12:47:50 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 09 월 C++                           월56수34          (6주 2일)
//
// 사용자 정의 자료형(User-Defined Data type)
//  - 어떤 자료형이라도 새로운 이름으로 묶을 수 있다(struct, class)
//  - 묶인 자료는 메모리를 얼마나 차지하나?
//	 -> 속도를 위해 메모리를 더 많이 사용한다.
//  - 묶어 사용할때(생성, 대입, 복사, 소멸) 어떤 일이 일어나나?
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

struct Vertex {	
	float x;
	float y;
	float z;

	// 디폴트 생성자함수( default ctor)
	Vertex() :  x{3}, y{3}, z{3}
	{
		cout << "디폴트 생성자가 호출되었다" << endl;
	}

	void show()		// 멤버 함수(member function)
	{
		cout << "(" << x << ", " << y << ", " << z << ")" << endl;
	}
};

int main()
{
	Vertex a;

	a.show();

	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Wed Oct  9 13:00:10 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 09 월 C++                           월56수34          (6주 2일)
//
// 사용자 정의 자료형(User-Defined Data type)
//  - 어떤 자료형이라도 새로운 이름으로 묶을 수 있다(struct, class)
//  - 묶인 자료는 메모리를 얼마나 차지하나?
//	 -> 속도를 위해 메모리를 더 많이 사용한다.
//  - 묶어 사용할때(생성, 대입, 복사, 소멸) 어떤 일이 일어나나?
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

struct Vertex {	
	float x;
	float y;
	float z;

	// 디폴트 생성자함수( default ctor)
	Vertex() :  x{3}, y{3}, z{3}
	{
		cout << "디폴트 생성자가 호출되었다" << endl;
	}

	// 다른 다양한 생성자도 사용자가 책임지고 코딩해야 한다.
	Vertex( float a,  float b, float c ) : x { a }, y { b }, z { c }{
		cout << "정수 3개를 인자로 받은 생성자가 호출되었다" << endl;
	}

	void show()		// 멤버 함수(member function)
	{
		cout << "(" << x << ", " << y << ", " << z << ")" << endl;
	}
};

int main()
{
	Vertex a { 1, 2, 3 };
	


	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Wed Oct  9 13:05:02 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 09 월 C++                           월56수34          (6주 2일)
//
// 사용자 정의 자료형(User-Defined Data type)
//  - 어떤 자료형이라도 새로운 이름으로 묶을 수 있다(struct, class)
//  - 묶인 자료는 메모리를 얼마나 차지하나?
//	 -> 속도를 위해 메모리를 더 많이 사용한다.
//  - 묶어 사용할때(생성, 대입, 복사, 소멸) 어떤 일이 일어나나?
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

struct Vertex {	
	float x { 3 };
	float y { 3 };
	float z { 3 };

	// 함수 오버로딩(overloading)
	// 같은 이름의 함수를 얼마든지 사용할 수 있다(전달 인자로 구분가능하다면)

	// 디폴트 생성자함수( default ctor)
	Vertex() :  x{3}, y{3}, z{3} {
		cout << "디폴트 생성자가 호출되었다" << endl;
	}

	// 다른 다양한 생성자도 사용자가 책임지고 코딩해야 한다.
	Vertex( float a,  float b, float c ) : x { a }, y { b }, z { c } {
		cout << "정수 3개를 인자로 받은 생성자가 호출되었다" << endl;
	}

	void show()		// 멤버 함수(member function)
	{
		cout << "(" << x << ", " << y << ", " << z << ")" << endl;
	}
};

int main()
{
	Vertex a { 1, 2, 3 };
	Vertex b;

	a.show();
	b.show();

	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Wed Oct  9 13:13:29 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 09 월 C++                           월56수34          (6주 2일)
//
// 사용자 정의 자료형(User-Defined Data type)
//  - 어떤 자료형이라도 새로운 이름으로 묶을 수 있다(struct, class)
//  - 묶인 자료는 메모리를 얼마나 차지하나?
//	 -> 속도를 위해 메모리를 더 많이 사용한다.
//  - 묶어 사용할때(생성, 대입, 복사, 소멸) 어떤 일이 일어나나?
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

struct Vertex {	
	float x { 3 };
	float y { 3 };
	float z { 3 };

	Vertex() {
		cout << "디폴트 생성자가 호출되었다" << endl;
	}

	Vertex( float a,  float b, float c ) : x { a }, y { b }, z { c } {
		cout << "정수 3개를 인자로 받은 생성자가 호출되었다" << endl;
	}

	void show() {
		cout << "(" << x << ", " << y << ", " << z << ")" << endl;
	}
};

int main()
{
	int a;			// 스택에 4바이트 할당

	int b { 10 };		// int를 10으로 초기화

	int c;			// int메모리를 할당

	c = 20;			// c로 억세스하는 메모리의 값을 20으로 기록(쓰기동작, assignment)

	//int d = a;		// a를 복사하여 d를 생성한다


	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Wed Oct  9 13:14:42 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 09 월 C++                           월56수34          (6주 2일)
//
// 사용자 정의 자료형(User-Defined Data type)
//  - 어떤 자료형이라도 새로운 이름으로 묶을 수 있다(struct, class)
//  - 묶인 자료는 메모리를 얼마나 차지하나?
//	 -> 속도를 위해 메모리를 더 많이 사용한다.
//  - 묶어 사용할때(생성, 대입, 복사, 소멸) 어떤 일이 일어나나?
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

struct Vertex {	
	float x { 3 };
	float y { 3 };
	float z { 3 };

	Vertex() {
		cout << "디폴트 생성자가 호출되었다" << endl;
	}

	Vertex( float a,  float b, float c ) : x { a }, y { b }, z { c } {
		cout << "정수 3개를 인자로 받은 생성자가 호출되었다" << endl;
	}

	void show() {
		cout << "(" << x << ", " << y << ", " << z << ")" << endl;
	}
};

int main()
{
	Vertex a;
	Vertex b {};
	Vertex c { 1, 2, 3 };
	Vertex d = a;

	d.show();

	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Wed Oct  9 13:22:36 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 09 월 C++                           월56수34          (6주 2일)
//
// 사용자 정의 자료형(User-Defined Data type)
//  - 어떤 자료형이라도 새로운 이름으로 묶을 수 있다(struct, class)
//  - 묶인 자료는 메모리를 얼마나 차지하나?
//	 -> 속도를 위해 메모리를 더 많이 사용한다.
//  - 묶어 사용할때(생성, 대입, 복사, 소멸) 어떤 일이 일어나나?
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

struct Vertex {	
	float x { 3 };
	float y { 3 };
	float z { 3 };

	Vertex() 
	{
		cout << "디폴트 생성자가 호출되었다" << endl;
	}

	Vertex( float a,  float b, float c ) : x { a }, y { b }, z { c }
	{
		cout << "정수 3개를 인자로 받은 생성자가 호출되었다" << endl;
	}

	
	// 다음시간은 여기에서 - const와 &의미 설명

	Vertex( const Vertex& other ) : x { other.x }, y { other.y }, z { other.z }		// 복사 생성자(copy constructor) - 컴파일러가 자동생성가능한
	{																				// special member
		cout << "복사생성자가 호출되었다" << endl;
	}


	void show()
	{
		cout << "(" << x << ", " << y << ", " << z << ")" << endl;
	}
};

int main()
{
	Vertex a;
	Vertex b {};
	Vertex c { 1, 2, 3 };
	Vertex d { a };			// Vertex d = a  -->  Vertex d( a );

	d.show();

	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Wed Oct  9 13:24:25 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 09 월 C++                           월56수34          (6주 2일)
//
// 사용자 정의 자료형(User-Defined Data type)
//  - 어떤 자료형이라도 새로운 이름으로 묶을 수 있다(struct, class)
//  - 묶인 자료는 메모리를 얼마나 차지하나?
//	 -> 속도를 위해 메모리를 더 많이 사용한다.
//  - 묶어 사용할때(생성, 대입, 복사, 소멸) 어떤 일이 일어나나?
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

struct Vertex {	
	float x { 3 };
	float y { 3 };
	float z { 3 };

	Vertex() 
	{
		cout << "디폴트 생성자가 호출되었다" << endl;
	}

	Vertex( float a,  float b, float c ) : x { a }, y { b }, z { c }
	{
		cout << "정수 3개를 인자로 받은 생성자가 호출되었다" << endl;
	}

	
	// 다음시간은 여기에서 - const와 &의미 설명

	Vertex( const Vertex& other ) : x { other.x * 10 }, y { other.y * 10 }, z { other.z * 10 }		// 복사 생성자(copy constructor) - 컴파일러가 자동생성가능한
	{																				// special member
		cout << "복사생성자가 호출되었다" << endl;
	}


	void show()
	{
		cout << "(" << x << ", " << y << ", " << z << ")" << endl;
	}
};

int main()
{
	Vertex a;
	Vertex b {};
	Vertex c { 1, 2, 3 };
	Vertex d { a };			// Vertex d = a  -->  Vertex d( a );

	d = c;		// special member의 일종

	d.show();

	save( "소스.cpp" );
}