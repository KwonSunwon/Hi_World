


----------------------------------------------------------------------------
Mon Oct 14 13:54:45 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

// 실제 마주킬 수 있는 모든 것의 속성과 행동을 묶어서 새 자료형을 만들 수 있다.

class Dog {
	// 표현하고지 하는 객체의 속성(attribute)은 멤버 변수로 표현
	// - 물리행이면서 메모리를 차치하는 자료형으로 표현할 수 있다
	string name;
	int age;		// 개월수로 적어본다
	
	// 표현하고자 하는 객체의 행동(behavior)은 멤버함수로 표현한다
	void run();		// 함수는 class 내에서 선언만 하는 것이 원칙이다
};

void Dog::run()
{
	cout << name << " - " << age << " 달린다" << endl;
}

int main()
{
	

	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Mon Oct 14 14:07:40 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

// 실제 마주킬 수 있는 모든 것의 속성과 행동을 묶어서 새 자료형을 만들 수 있다.

class Dog {
private:		// 멤버변수는 여기에 만든다
	string name;
	int age;

public:

	Dog() = default;				// default constructor
	~Dog() = default;				// destructor
	Dog( const Dog& ) = default;			// copy constructor
	Dog& operator = ( const Dog& ) = default;	// copy assignment operator
	Dog( Dog&& ) = default;			// move constructor
	Dog& operator = ( Dog&& ) = default;		// move assignment operator


	void run()
	{
		cout << name << " - " << age << " 달린다" << endl;
	}
};

int main()
{
	// 이 코드가 문제없이 실행되는 이유는
	// 컴파일러가 사용자정의 자료형에 대하여
	// special member function을 만들기 때문이다

	Dog a;			// Dog()
	Dog b { a };	// Dog( const Dog& )
	a = b;			// a.operator = ( const Dog& )

	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Mon Oct 14 14:17:11 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

// 실제 마주킬 수 있는 모든 것의 속성과 행동을 묶어서 새 자료형을 만들 수 있다.

class Dog {
private:
	string name;
	int age;

public:

	// 멤버변수의 값을 읽게 하려면 gettor를 코딩


	// 멤버변수의 값을 쓰게 하려면 settor를 코딩


	void run()
	{
		cout << name << " - " << age << " 달린다" << endl;
	}

	void show()
	{
		cout << name << ", " << age << endl;
	}
};

int main()
{
	Dog a;

	a.show();

	// cout << a.name << a.age << endl;		// 이런 코드는 금지
	
	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Mon Oct 14 14:18:31 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

// 실제 마주킬 수 있는 모든 것의 속성과 행동을 묶어서 새 자료형을 만들 수 있다.

class Dog {
private:
	string name { "이름을 없어요"s };
	int age { 0 };

public:

	// 멤버변수의 값을 읽게 하려면 gettor를 코딩


	// 멤버변수의 값을 쓰게 하려면 settor를 코딩


	void run()
	{
		cout << name << " - " << age << " 달린다" << endl;
	}

	void show()
	{
		cout << name << ", " << age << endl;
	}
};

int main()
{
	Dog a;

	a.show();
	
	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Mon Oct 14 14:20:28 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

// 실제 마주킬 수 있는 모든 것의 속성과 행동을 묶어서 새 자료형을 만들 수 있다.

class Dog {
private:
	string name { "이름을 없어요"s };
	int age { 0 };

public:
	// 생성자 - 객체가 만들어질때 메모리를 어떻게 설정할 건가?
	Dog()
	{
		cout << "디폴트 생성자" << endl;
	}


	// 멤버변수의 값을 읽게 하려면 gettor를 코딩


	// 멤버변수의 값을 쓰게 하려면 settor를 코딩


	void run()
	{
		cout << name << " - " << age << " 달린다" << endl;
	}

	void show()
	{
		cout << name << ", " << age << "개월" << endl;
	}
};

int main()
{
	Dog a;

	a.show();
	
	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Mon Oct 14 14:33:18 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

// 실제 마주킬 수 있는 모든 것의 속성과 행동을 묶어서 새 자료형을 만들 수 있다.

class Dog {
private:
	string name { "이름을 없어요"s };
	int age { 0 };

public:
	// 생성자 - 객체가 만들어질때 메모리를 어떻게 설정할 건가?
	Dog() : name { "무명" }, age { -1 }
	{
		cout << "디폴트 생성자" << endl;
	}


	// 멤버변수의 값을 읽게 하려면 gettor를 코딩


	// 멤버변수의 값을 쓰게 하려면 settor를 코딩


	void run()
	{
		cout << name << " - " << age << " 달린다" << endl;
	}

	void show()
	{
		cout << name << ", " << age << "개월" << endl;
	}
};

int main()
{
	Dog a;

	a.show();
	
	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Mon Oct 14 14:37:03 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

// 실제 마주킬 수 있는 모든 것의 속성과 행동을 묶어서 새 자료형을 만들 수 있다.

class Dog {
private:
	string name;
	int age;

public:
	// 생성자 - 객체가 만들어질때 메모리를 어떻게 설정할 건가?
	Dog() : name { "없음" }, age {}
	{
		cout << "디폴트 생성자" << endl;
	}


	// 멤버변수의 값을 읽게 하려면 gettor를 코딩


	// 멤버변수의 값을 쓰게 하려면 settor를 코딩


	void run()
	{
		cout << name << " - " << age << " 달린다" << endl;
	}

	void show()
	{
		cout << name << ", " << age << "개월" << endl;
	}
};

int main()
{
	Dog a;

	a.show();
	
	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Mon Oct 14 14:40:53 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

// const와 &의 정확한 사용범의 매우 중요함

int SN {};

class Dog {
private:
	int id { SN++ };		// 개 마다 고유의 식별번호를 준다
	string name;
	int age;

public:
	// 생성자 - 객체가 만들어질때 메모리를 어떻게 설정할 건가?
	Dog() : name { "없음" }, age {}
	{
		cout << id << " - 디폴트 생성자" << endl;
	}

	// 멤버변수의 값을 읽게 하려면 gettor를 코딩


	// 멤버변수의 값을 쓰게 하려면 settor를 코딩


	void run()
	{
		cout << id << " - " << name << " - " << age << " 달린다" << endl;
	}

	void show()
	{
		cout << id << " - " << name << ", " << age << "개월" << endl;
	}
};

int main()
{
	Dog a;

	a.show();
	
	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Mon Oct 14 14:41:50 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

// const와 &의 정확한 사용범의 매우 중요함

int SN {};

class Dog {
private:
	int id { SN++ };		// 개 마다 고유의 식별번호를 준다
	string name;
	int age;

public:
	// 생성자 - 객체가 만들어질때 메모리를 어떻게 설정할 건가?
	Dog() : name { "없음" }, age {}
	{
		cout << id << " - 디폴트 생성자" << endl;
	}

	// 멤버변수의 값을 읽게 하려면 gettor를 코딩


	// 멤버변수의 값을 쓰게 하려면 settor를 코딩


	void run()
	{
		cout << id << " - " << name << " - " << age << " 달린다" << endl;
	}

	void show()
	{
		cout << id << " - " << name << ", " << age << "개월" << endl;
	}
};

int main()
{
	Dog a;
	a.show();

	Dog b { a };
	b.show();

	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Mon Oct 14 14:44:01 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

// const와 &의 정확한 사용범의 매우 중요함

int SN {};

class Dog {
private:
	int id { SN++ };		// 개 마다 고유의 식별번호를 준다
	string name;
	int age;

public:
	// 생성자 - 객체가 만들어질때 메모리를 어떻게 설정할 건가?
	Dog() : name { "없음" }, age {}
	{
		cout << id << " - 디폴트 생성자" << endl;
	}

	// 소멸자 - 생성시 자원을 할당했다면 소멸자를 코딩해야 한다
	~Dog()
	{
		cout << id << " - 소멸자" << endl;
	}
	
	// 멤버변수의 값을 읽게 하려면 gettor를 코딩


	// 멤버변수의 값을 쓰게 하려면 settor를 코딩


	void run()
	{
		cout << id << " - " << name << " - " << age << " 달린다" << endl;
	}

	void show()
	{
		cout << id << " - " << name << ", " << age << "개월" << endl;
	}
};

int main()
{
	Dog a;

	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Mon Oct 14 14:45:09 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

// const와 &의 정확한 사용범의 매우 중요함

int SN {};

class Dog {
private:
	int id { SN++ };		// 개 마다 고유의 식별번호를 준다
	string name;
	int age;

public:
	// 생성자 - 객체가 만들어질때 메모리를 어떻게 설정할 건가?
	Dog() : name { "없음" }, age {}
	{
		cout << id << " - 디폴트 생성자" << endl;
	}

	// 소멸자 - 생성시 자원을 할당했다면 소멸자를 코딩해야 한다
	~Dog()
	{
		cout << id << " - 소멸자" << endl;
	}
	
	// 멤버변수의 값을 읽게 하려면 gettor를 코딩


	// 멤버변수의 값을 쓰게 하려면 settor를 코딩


	void run()
	{
		cout << id << " - " << name << " - " << age << " 달린다" << endl;
	}

	void show()
	{
		cout << id << " - " << name << ", " << age << "개월" << endl;
	}
};

int main()
{
	cout << "메인 시작" << endl;

	Dog a;

	save( "소스.cpp" );

	cout << "메인 끝" << endl;
}


----------------------------------------------------------------------------
Mon Oct 14 14:46:11 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

// const와 &의 정확한 사용범의 매우 중요함

int SN {};

class Dog {
private:
	int id { SN++ };		// 개 마다 고유의 식별번호를 준다
	string name;
	int age;

public:
	// 생성자 - 객체가 만들어질때 메모리를 어떻게 설정할 건가?
	Dog() : name { "없음" }, age {}
	{
		cout << id << " - 디폴트 생성자" << endl;
	}

	// 소멸자 - 생성시 자원을 할당했다면 소멸자를 코딩해야 한다
	~Dog()
	{
		cout << id << " - 소멸자" << endl;
	}
	
	// 멤버변수의 값을 읽게 하려면 gettor를 코딩


	// 멤버변수의 값을 쓰게 하려면 settor를 코딩


	void run()
	{
		cout << id << " - " << name << " - " << age << " 달린다" << endl;
	}

	void show()
	{
		cout << id << " - " << name << ", " << age << "개월" << endl;
	}
};

int main()
{
	cout << "메인 시작" << endl;

	{
		Dog a;
	}

	save( "소스.cpp" );

	cout << "메인 끝" << endl;
}


----------------------------------------------------------------------------
Mon Oct 14 14:46:37 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

// const와 &의 정확한 사용범의 매우 중요함

int SN {};

class Dog {
private:
	int id { SN++ };		// 개 마다 고유의 식별번호를 준다
	string name;
	int age;

public:
	// 생성자 - 객체가 만들어질때 메모리를 어떻게 설정할 건가?
	Dog() : name { "없음" }, age {}
	{
		cout << id << " - 디폴트 생성자" << endl;
	}

	// 소멸자 - 생성시 자원을 할당했다면 소멸자를 코딩해야 한다
	~Dog()
	{
		cout << id << " - 소멸자" << endl;
	}
	
	// 멤버변수의 값을 읽게 하려면 gettor를 코딩


	// 멤버변수의 값을 쓰게 하려면 settor를 코딩


	void run()
	{
		cout << id << " - " << name << " - " << age << " 달린다" << endl;
	}

	void show()
	{
		cout << id << " - " << name << ", " << age << "개월" << endl;
	}
};

int main()
{
	cout << "메인 시작" << endl;

	Dog a;
	Dog b;

	save( "소스.cpp" );

	cout << "메인 끝" << endl;
}


----------------------------------------------------------------------------
Mon Oct 14 14:47:45 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

// const와 &의 정확한 사용범의 매우 중요함

int SN {};

class Dog {
private:
	int id { SN++ };		// 개 마다 고유의 식별번호를 준다
	string name;
	int age;

public:
	// 생성자 - 객체가 만들어질때 메모리를 어떻게 설정할 건가?
	Dog() : name { "없음" }, age {}
	{
		cout << id << " - 디폴트 생성자" << endl;
	}

	// 소멸자 - 생성시 자원을 할당했다면 소멸자를 코딩해야 한다
	~Dog()
	{
		cout << id << " - 소멸자" << endl;
	}
	
	// 멤버변수의 값을 읽게 하려면 gettor를 코딩


	// 멤버변수의 값을 쓰게 하려면 settor를 코딩


	void run()
	{
		cout << id << " - " << name << " - " << age << " 달린다" << endl;
	}

	void show()
	{
		cout << id << " - " << name << ", " << age << "개월" << endl;
	}
};

Dog a;

int main()
{
	cout << "메인 시작" << endl;

	save( "소스.cpp" );

	cout << "메인 끝" << endl;
}


----------------------------------------------------------------------------
Mon Oct 14 14:48:40 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

// const와 &의 정확한 사용범의 매우 중요함

int SN {};

class Dog {
private:
	int id { SN++ };		// 개 마다 고유의 식별번호를 준다
	string name;
	int age;

public:
	// 생성자 - 객체가 만들어질때 메모리를 어떻게 설정할 건가?
	Dog() : name { "없음" }, age {}
	{
		cout << id << " - 디폴트 생성자" << endl;
	}

	// 소멸자 - 생성시 자원을 할당했다면 소멸자를 코딩해야 한다
	~Dog()
	{
		cout << id << " - 소멸자" << endl;
	}
	
	// 멤버변수의 값을 읽게 하려면 gettor를 코딩


	// 멤버변수의 값을 쓰게 하려면 settor를 코딩


	void run()
	{
		cout << id << " - " << name << " - " << age << " 달린다" << endl;
	}

	void show()
	{
		cout << id << " - " << name << ", " << age << "개월" << endl;
	}
};

Dog a;
Dog b;
Dog c;

int main()
{
	cout << "메인 시작" << endl;

	save( "소스.cpp" );

	cout << "메인 끝" << endl;
}


----------------------------------------------------------------------------
Mon Oct 14 14:49:21 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

// const와 &의 정확한 사용범의 매우 중요함

int SN {};

class Dog {
private:
	int id { SN++ };		// 개 마다 고유의 식별번호를 준다
	string name;
	int age;

public:
	// 생성자 - 객체가 만들어질때 메모리를 어떻게 설정할 건가?
	Dog() : name { "없음" }, age {}
	{
		cout << id << " - 디폴트 생성자" << endl;
	}

	// 소멸자 - 생성시 자원을 할당했다면 소멸자를 코딩해야 한다
	~Dog()
	{
		cout << id << " - 소멸자" << endl;
	}
	
	// 멤버변수의 값을 읽게 하려면 gettor를 코딩


	// 멤버변수의 값을 쓰게 하려면 settor를 코딩


	void run()
	{
		cout << id << " - " << name << " - " << age << " 달린다" << endl;
	}

	void show()
	{
		cout << id << " - " << name << ", " << age << "개월" << endl;
	}
};

Dog a[3];
Dog b[5];

int main()
{
	cout << "메인 시작" << endl;

	save( "소스.cpp" );

	cout << "메인 끝" << endl;
}


----------------------------------------------------------------------------
Mon Oct 14 14:50:01 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

// const와 &의 정확한 사용범의 매우 중요함

int SN {};

class Dog {
private:
	int id { SN++ };		// 개 마다 고유의 식별번호를 준다
	string name;
	int age;

public:
	// 생성자 - 객체가 만들어질때 메모리를 어떻게 설정할 건가?
	Dog() : name { "없음" }, age {}
	{
		cout << id << " - 디폴트 생성자" << endl;
	}

	// 소멸자 - 생성시 자원을 할당했다면 소멸자를 코딩해야 한다
	~Dog()
	{
		cout << id << " - 소멸자" << endl;
	}
	
	// 멤버변수의 값을 읽게 하려면 gettor를 코딩


	// 멤버변수의 값을 쓰게 하려면 settor를 코딩


	void run()
	{
		cout << id << " - " << name << " - " << age << " 달린다" << endl;
	}

	void show()
	{
		cout << id << " - " << name << ", " << age << "개월" << endl;
	}
};


int main()
{
	cout << "메인 시작" << endl;

	new Dog;

	save( "소스.cpp" );

	cout << "메인 끝" << endl;
}


----------------------------------------------------------------------------
Mon Oct 14 14:51:26 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

// const와 &의 정확한 사용범의 매우 중요함

int SN {};

class Dog {
private:
	int id { SN++ };		// 개 마다 고유의 식별번호를 준다
	string name;
	int age;

public:
	// 생성자 - 객체가 만들어질때 메모리를 어떻게 설정할 건가?
	Dog() : name { "없음" }, age {}
	{
		cout << id << " - 디폴트 생성자" << endl;
	}

	// 소멸자 - 생성시 자원을 할당했다면 소멸자를 코딩해야 한다
	~Dog()
	{
		cout << id << " - 소멸자" << endl;
	}
	
	// 멤버변수의 값을 읽게 하려면 gettor를 코딩


	// 멤버변수의 값을 쓰게 하려면 settor를 코딩


	void run()
	{
		cout << id << " - " << name << " - " << age << " 달린다" << endl;
	}

	void show()
	{
		cout << id << " - " << name << ", " << age << "개월" << endl;
	}
};


int main()
{
	cout << "메인 시작" << endl;

	unique_ptr<Dog> (new Dog);

	save( "소스.cpp" );

	cout << "메인 끝" << endl;
}


----------------------------------------------------------------------------
Mon Oct 14 14:51:38 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

// const와 &의 정확한 사용범의 매우 중요함

int SN {};

class Dog {
private:
	int id { SN++ };		// 개 마다 고유의 식별번호를 준다
	string name;
	int age;

public:
	// 생성자 - 객체가 만들어질때 메모리를 어떻게 설정할 건가?
	Dog() : name { "없음" }, age {}
	{
		cout << id << " - 디폴트 생성자" << endl;
	}

	// 소멸자 - 생성시 자원을 할당했다면 소멸자를 코딩해야 한다
	~Dog()
	{
		cout << id << " - 소멸자" << endl;
	}
	
	// 멤버변수의 값을 읽게 하려면 gettor를 코딩


	// 멤버변수의 값을 쓰게 하려면 settor를 코딩


	void run()
	{
		cout << id << " - " << name << " - " << age << " 달린다" << endl;
	}

	void show()
	{
		cout << id << " - " << name << ", " << age << "개월" << endl;
	}
};


int main()
{
	cout << "메인 시작" << endl;

	unique_ptr<Dog> p (new Dog);

	save( "소스.cpp" );

	cout << "메인 끝" << endl;
}


----------------------------------------------------------------------------
Mon Oct 14 14:52:26 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

// const와 &의 정확한 사용범의 매우 중요함

int SN {};

class Dog {
private:
	int id { SN++ };		// 개 마다 고유의 식별번호를 준다
	string name;
	int age;

public:
	// 생성자 - 객체가 만들어질때 메모리를 어떻게 설정할 건가?
	Dog() : name { "없음" }, age {}
	{
		cout << id << " - 디폴트 생성자" << endl;
	}

	// 소멸자 - 생성시 자원을 할당했다면 소멸자를 코딩해야 한다
	~Dog()
	{
		cout << id << " - 소멸자" << endl;
	}
	
	// 멤버변수의 값을 읽게 하려면 gettor를 코딩


	// 멤버변수의 값을 쓰게 하려면 settor를 코딩


	void run()
	{
		cout << id << " - " << name << " - " << age << " 달린다" << endl;
	}

	void show()
	{
		cout << id << " - " << name << ", " << age << "개월" << endl;
	}
};


int main()
{
	cout << "메인 시작" << endl;

	auto x = new Dog;

	save( "소스.cpp" );

	delete x;

	cout << "메인 끝" << endl;
}


----------------------------------------------------------------------------
Mon Oct 14 14:52:38 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

// const와 &의 정확한 사용범의 매우 중요함

int SN {};

class Dog {
private:
	int id { SN++ };		// 개 마다 고유의 식별번호를 준다
	string name;
	int age;

public:
	// 생성자 - 객체가 만들어질때 메모리를 어떻게 설정할 건가?
	Dog() : name { "없음" }, age {}
	{
		cout << id << " - 디폴트 생성자" << endl;
	}

	// 소멸자 - 생성시 자원을 할당했다면 소멸자를 코딩해야 한다
	~Dog()
	{
		cout << id << " - 소멸자" << endl;
	}
	
	// 멤버변수의 값을 읽게 하려면 gettor를 코딩


	// 멤버변수의 값을 쓰게 하려면 settor를 코딩


	void run()
	{
		cout << id << " - " << name << " - " << age << " 달린다" << endl;
	}

	void show()
	{
		cout << id << " - " << name << ", " << age << "개월" << endl;
	}
};


int main()
{
	cout << "메인 시작" << endl;

	Dog* x = new Dog;

	save( "소스.cpp" );

	delete x;

	cout << "메인 끝" << endl;
}


----------------------------------------------------------------------------
Mon Oct 14 14:54:03 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

// const와 &의 정확한 사용범의 매우 중요함

int SN {};

class Dog {
private:
	int id { SN++ };		// 개 마다 고유의 식별번호를 준다
	string name;
	int age;

public:
	// 생성자 - 객체가 만들어질때 메모리를 어떻게 설정할 건가?
	Dog() : name { "없음" }, age {}
	{
		cout << id << " - 디폴트 생성자" << endl;
	}

	// 소멸자 - 생성시 자원을 할당했다면 소멸자를 코딩해야 한다
	~Dog()
	{
		cout << id << " - 소멸자" << endl;
	}
	
	// 멤버변수의 값을 읽게 하려면 gettor를 코딩


	// 멤버변수의 값을 쓰게 하려면 settor를 코딩


	void run()
	{
		cout << id << " - " << name << " - " << age << " 달린다" << endl;
	}

	void show()
	{
		cout << id << " - " << name << ", " << age << "개월" << endl;
	}
};


int main()
{
	cout << "메인 시작" << endl;

	Dog* x = new Dog[5];

	save( "소스.cpp" );

	delete[] x;

	cout << "메인 끝" << endl;
}


----------------------------------------------------------------------------
Mon Oct 14 15:03:42 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include <random>
#include "save.h"

using namespace std;

// const와 &의 정확한 사용범의 매우 중요함

int SN {};

default_random_engine dre;
uniform_int_distribution<int> uid { 1, 150 };

class Dog {
private:
	int id { SN++ };		// 개 마다 고유의 식별번호를 준다
	string name;
	int age;

public:
	// 생성자 - 객체가 만들어질때 메모리를 어떻게 설정할 건가?
	Dog() : name { "없음" }, age {}
	{
		name += to_string(uid( dre ));		// itoa
		age = uid( dre );
		cout << id << " - 디폴트 생성자" << endl;
	}

	// 소멸자 - 생성시 자원을 할당했다면 소멸자를 코딩해야 한다
	~Dog()
	{
		cout << id << " - 소멸자" << endl;
	}
	
	// 멤버변수의 값을 읽게 하려면 gettor를 코딩
	string getName() const		// const는 이 함수가 멤버변수를 읽기만 함을 보증
	{
		return name;
	};

	int getAge() const
	{
		return age;
	};

	// 멤버변수의 값을 쓰게 하려면 settor를 코딩


	void run()
	{
		cout << id << " - " << name << " - " << age << " 달린다" << endl;
	}

	void show()
	{
		cout << id << " - " << name << ", " << age << "개월" << endl;
	}
};

// [문제] Dog 100마리를 default 생성하였다.
// 나이 오름차순으로 정렬 후 출력하라
// 이름 오름차순으로 정렬 후 출력하라

int main()
{
	Dog dogs[ 100 ];

	for( Dog dog : dogs )		// 이 코드는 매우 잘못되었다
		dog.show();

	save( "소스.cpp" );
}


----------------------------------------------------------------------------
Mon Oct 14 15:04:21 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 10. 14 월 C++                           월56수34          (7주 1일)
//
//
// 과제 제출 마감  - 10/21 월 1시 30분
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include <random>
#include "save.h"

using namespace std;

// const와 &의 정확한 사용범의 매우 중요함

int SN {};

default_random_engine dre;
uniform_int_distribution<int> uid { 1, 150 };

class Dog {
private:
	int id { SN++ };		// 개 마다 고유의 식별번호를 준다
	string name;
	int age;

public:
	// 생성자 - 객체가 만들어질때 메모리를 어떻게 설정할 건가?
	Dog() : name { "없음" }, age {}
	{
		name += to_string(uid( dre ));		// itoa
		age = uid( dre );
		//cout << id << " - 디폴트 생성자" << endl;
	}

	// 소멸자 - 생성시 자원을 할당했다면 소멸자를 코딩해야 한다
	~Dog()
	{
		//cout << id << " - 소멸자" << endl;
	}
	
	// 멤버변수의 값을 읽게 하려면 gettor를 코딩
	string getName() const		// const는 이 함수가 멤버변수를 읽기만 함을 보증
	{
		return name;
	};

	int getAge() const
	{
		return age;
	};

	// 멤버변수의 값을 쓰게 하려면 settor를 코딩


	void run()
	{
		cout << id << " - " << name << " - " << age << " 달린다" << endl;
	}

	void show()
	{
		cout << id << " - " << name << ", " << age << "개월" << endl;
	}
};

// [문제] Dog 100마리를 default 생성하였다.
// 나이 오름차순으로 정렬 후 출력하라
// 이름 오름차순으로 정렬 후 출력하라

int main()
{
	Dog dogs[ 100 ];

	for( Dog dog : dogs )		// 이 코드는 매우 잘못되었다
		dog.show();

	save( "소스.cpp" );
}