


----------------------------------------------------------------------------
Mon Dec  2 13:53:56 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 12. 02  월		   C++월56수34				 (14주 1일)
//
// 템플릿(template)(책 7장) - 메타프로그래밍(meta-programing)
//
// 템플릿으로 만들 수 있는 것
//		- 함수	- 그냥 함수 --> 알고리즘
//				- 멤버 함수
//		- 클래스 --> 자료구조(리스트, 맵, 벡터, 어레이, 스택, 트리, 해시...)
//
// 12/9	 월 종강(15주 1일) - 강의정리, 책소개
// 12/11 수 시험3(15주 2일)
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

template <class T>
T amax ( T, T );

template <>
const char* amax <const char*> ( const char*, const char* );

int main ( ) 
{
	cout << amax < > ( "abc", "defa" ) << endl;		// 글자 수가 많은 것이 크다면 어떻게 해야할까?

	save( "소스.cpp" );
}

template <class T>
T amax ( T a, T b )
{
	return a < b ? b : a;
}

// 특별히 parameter가 const char* 인 경우는
// 컴파일러가 코드를 만들지 않고 내가 쓴 코드를 사용하게 할 수 있다
// --> 특수화(spercialization)

template <>
const char* amax<const char*> (const char* a, const char* b )
{
	if ( strlen ( a ) < strlen ( b ) )
		return b;
	else
		return a;
}


----------------------------------------------------------------------------
Mon Dec  2 14:04:21 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 12. 02  월		   C++월56수34				 (14주 1일)
//
// 템플릿(template)(책 7장) - 메타프로그래밍(meta-programing)
//
// 템플릿으로 만들 수 있는 것
//		- 함수	- 그냥 함수 --> 알고리즘
//				- 멤버 함수
//		- 클래스 --> 자료구조(리스트, 맵, 벡터, 어레이, 스택, 트리, 해시...)
//
// 12/9	 월 종강(15주 1일) - 강의정리, 책소개
// 12/11 수 시험3(15주 2일)
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 배열의 경계를 검사하는 안전배열을 만든다.

int main ( ) 
{
	int a[10];

	cout << a[0] << endl;
	cout << a[-10] << endl;
	cout << a[100] << endl;

	save( "소스.cpp" );
}

- 수동 저장
//-----------------------------------------------------------------------------
// 2019. 12. 02  월		   C++월56수34				 (14주 1일)
//
// 템플릿(template)(책 7장) - 메타프로그래밍(meta-programing)
//
// 템플릿으로 만들 수 있는 것
//		- 함수	- 그냥 함수 --> 알고리즘
//				- 멤버 함수
//		- 클래스 --> 자료구조(리스트, 맵, 벡터, 어레이, 스택, 트리, 해시...)
//
// 12/9	 월 종강(15주 1일) - 강의정리, 책소개
// 12/11 수 시험3(15주 2일)
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 배열의 경계를 검사하는 안전배열을 만든다.

class IntArr {
	int* arr{ nullptr };
	size_t size{ 0 };
public:
	IntArr ( int n ) : size{n}
	{
		arr = new int[n];
	}
	~IntArr ( )
	{
		delete[] arr;
	}
	IntArr ( const IntArr& other )
	{
		*this = other;
	}
	IntArr& operator=( const IntArr& other )
	{
		if ( this != &other ) {
			if ( size )
				delete[] arr;
			size = other.size;
			arr = new int[size];
			memcpy ( arr, other.arr, size );
		}
		return *this;
	}

	size_t size ( ) const
	{
		return size;
	}

	int& operator[]( int n )
	{
		if ( 0 <= n && n < size )
			return arr[n];
		
		cout << "경계를 벗어났음" << endl;
		return arr[0];		// throw를 통해 예외 처리를 해주는 것이 정상
	}
	int* begin ( ) const
	{
		return arr;
	}
	int* end ( ) const
	{
		return arr + size;
	}
};

int main ( ) 
{
	IntArr a ( 10 );	// 정수 10개가 들어갈 공간을 확보한다, 초깃값 0

	for ( int i = 0; i < a.size( ) ; ++i )
		a[i] = i;

	for ( int d : a )
		cout << d << ' ';
	cout << endl;

	cout << a[10] << endl;		// 화면에 "경계를 벗어났음" 이라고 출력하자

	save( "소스.cpp" );
}




----------------------------------------------------------------------------
Mon Dec  2 15:17:55 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 12. 02  월		   C++월56수34				 (14주 1일)
//
// 템플릿(template)(책 7장) - 메타프로그래밍(meta-programing)
//
// 템플릿으로 만들 수 있는 것
//		- 함수	- 그냥 함수 --> 알고리즘
//				- 멤버 함수
//		- 클래스 --> 자료구조(리스트, 맵, 벡터, 어레이, 스택, 트리, 해시...)
//
// 12/9	 월 종강(15주 1일) - 강의정리, 책소개
// 12/11 수 시험3(15주 2일)
//-----------------------------------------------------------------------------

#include <iostream>
#include <numeric>
#include "save.h"
using namespace std;

template < class T, int N >
class Arr {
	int num{ N };
	T data[N];	// 소스코드가 생성되는 순간에 N 은 상수가 됨

public:
	Arr ( ) {}
	
	T* begin ( )
	{
		return data;
	}
	T* end ( )
	{
		return data + num;
	}
};

class Dog{};

int main ( ) 
{
	// <int, 10, vector<int>> 템플릿 타입

	Arr<int, 10> a;
	Arr<Dog, 100> d;

	iota ( begin ( a ), end ( a ) , 1);

	for ( auto d : a )
		cout << d << ' ';
	cout << endl;

	save( "소스.cpp" );
}
