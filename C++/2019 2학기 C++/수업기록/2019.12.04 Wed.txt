----------------------------------------------------------------------------
Wed Dec  4 11:52:14 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 12. 04  수		   C++월56수34				 (14주 2일)
//
//
// 12/9	 월 종강(15주 1일) - 강의정리, 책소개
// 12/11 수 시험3(15주 2일)
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

int main ( ) 
{
	int* p = new int;	// 자원을 확보하였다.

	// 이 자원이 언제 어느 곳에서 해제될지 불분명하다.
	// 이 자원을 가리키는 p의 수명이 끝날때 확보한 자원도 같이 해제할 수는 없을까?
	// p는 현재 int* 이다 --- POD
	// p를 똘똘하게 만들 수 없을까? -> p를 클래스로 작성하면 된다.

	save( "소스.cpp" );
}



----------------------------------------------------------------------------
Wed Dec  4 11:56:55 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 12. 04  수		   C++월56수34				 (14주 2일)
//
//
// 12/9	 월 종강(15주 1일) - 강의정리, 책소개
// 12/11 수 시험3(15주 2일)
//-----------------------------------------------------------------------------

#include <iostream>
#include <memory>
#include "save.h"
using namespace std;

int main ( ) 
{
	// 스마트 포인터
	unique_ptr<int> p ( new int );

	cout << sizeof ( p );

	save( "소스.cpp" );
}



----------------------------------------------------------------------------
Wed Dec  4 11:58:59 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 12. 04  수		   C++월56수34				 (14주 2일)
//
//
// 12/9	 월 종강(15주 1일) - 강의정리, 책소개
// 12/11 수 시험3(15주 2일)
//-----------------------------------------------------------------------------

#include <iostream>
#include <memory>
#include "save.h"
using namespace std;

class Dog
{
public:
	Dog ( )
	{
		cout << "생성" << endl;
 	}
	~Dog ( )
	{
		cout << "소멸" << endl;
	}

private:

};
int main ( ) 
{
	// 스마트 포인터
	unique_ptr<Dog> p ( new Dog );

	cout << sizeof ( p );

	save( "소스.cpp" );
}



----------------------------------------------------------------------------
Wed Dec  4 12:02:52 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 12. 04  수		   C++월56수34				 (14주 2일)
//
//
// 12/9	 월 종강(15주 1일) - 강의정리, 책소개
// 12/11 수 시험3(15주 2일)
//-----------------------------------------------------------------------------

#include <iostream>
#include <memory>
#include "save.h"
using namespace std;

class Dog
{
public:
	Dog ( )
	{
		cout << "생성" << endl;
 	}
	~Dog ( )
	{
		cout << "소멸" << endl;
	}
};

class UPTR
{
	Dog* p;
public:
	UPTR ( Dog* p ) : p { p } {}
	~UPTR ( ) { delete p; }
};


int main ( ) 
{
	// 스마트 포인터
	UPTR p ( new Dog );

	save( "소스.cpp" );
}



----------------------------------------------------------------------------
Wed Dec  4 12:18:33 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 12. 04  수		   C++월56수34				 (14주 2일)
//
//
// 12/9	 월 종강(15주 1일) - 강의정리, 책소개
// 12/11 수 시험3(15주 2일)
//-----------------------------------------------------------------------------

#include <iostream>
#include <memory>
#include "save.h"
using namespace std;

class Dog
{
public:
	Dog ( )
	{
		cout << "생성" << endl;
 	}
	~Dog ( )
	{
		cout << "소멸" << endl;
	}
};

/*
template<class T>
class UPTR
{
	T* ptr;
public:
	UPTR ( T* p ) : ptr { p } {}
	~UPTR ( ) { delete ptr; }
};
*/

void delDog ( Dog* p )
{
	delete[] p;
}

int main ( ) 
{
	// 스마트 포인터
	unique_ptr< Dog, void(*)(Dog*) > p ( new Dog[10], delDog );

	save( "소스.cpp" );
}



----------------------------------------------------------------------------
Wed Dec  4 12:21:07 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 12. 04  수		   C++월56수34				 (14주 2일)
//
//
// 12/9	 월 종강(15주 1일) - 강의정리, 책소개
// 12/11 수 시험3(15주 2일)
//-----------------------------------------------------------------------------

#include <iostream>
#include <memory>
#include <functional>
#include "save.h"
using namespace std;

class Dog
{
public:
	Dog ( )
	{
		cout << "생성" << endl;
 	}
	~Dog ( )
	{
		cout << "소멸" << endl;
	}
};

/*
template<class T>
class UPTR
{
	T* ptr;
public:
	UPTR ( T* p ) : ptr { p } {}
	~UPTR ( ) { delete ptr; }
};
*/

void delDog ( Dog* p )
{
	delete[] p;
}

int main ( ) 
{
	// 스마트 포인터
	unique_ptr< Dog, function<void(Dog*)> > p ( new Dog[10], delDog );

	save( "소스.cpp" );
}



----------------------------------------------------------------------------
Wed Dec  4 12:22:10 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 12. 04  수		   C++월56수34				 (14주 2일)
//
//
// 12/9	 월 종강(15주 1일) - 강의정리, 책소개
// 12/11 수 시험3(15주 2일)
//-----------------------------------------------------------------------------

#include <iostream>
#include <memory>
#include <functional>
#include "save.h"
using namespace std;

class Dog
{
public:
	Dog ( )
	{
		cout << "생성" << endl;
 	}
	~Dog ( )
	{
		cout << "소멸" << endl;
	}
};

/*
template<class T>
class UPTR
{
	T* ptr;
public:
	UPTR ( T* p ) : ptr { p } {}
	~UPTR ( ) { delete ptr; }
};
*/

int main ( ) 
{
	// 스마트 포인터
	unique_ptr< Dog, function<void ( Dog* )> > p ( new Dog[10], []( Dog* p ) { delete[] p; } );

	save( "소스.cpp" );
}



----------------------------------------------------------------------------
Wed Dec  4 13:14:47 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 12. 04  수		   C++월56수34				 (14주 2일)
//
// 진짜 프로그램 연습( 쬐끔만 )
//
// 12/9	 월 종강(15주 1일) - 강의정리, 책소개
// 12/11 수 시험3(15주 2일)
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include <algorithm>
#include <random>
#include <array>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution<int> uidAge ( 1, 20 );

class Dog {
	string name;
	int age;
public:
	Dog ( string s, int n ) : name{ s }, age{ n }{}
	
	bool operator<( const Dog& rhs ) const
	{
		return age < rhs.age;
	}

	friend ostream& operator<<( ostream&, const Dog& );
};

ostream& operator<<( ostream& os, const Dog& dog )
{
	os << dog.name << " - " << dog.age;
	return os;
}

int main ( )
{
	vector<Dog> dogs{ { "ㄱ", 1 },{"ㄴ", 1},{ "ㄱ", 1 },{"ㄴ", 1},{ "ㄱ", 1 },{"ㄴ", 1},{ "ㄱ", 1 },{"ㄴ", 1},{ "ㄱ", 1 },{"ㄴ", 1} };		// [][][][][][][][][][]


	cout << "현재 용량 - " << dogs.capacity ( ) << endl;

	dogs.insert ( dogs.end(), Dog ( "댕댕이", 100 ) );

	cout << "현재 용량 - " << dogs.capacity ( ) << endl;

	// 개의 이름과 나이를 마음대로 설정하자

	// 나이 오름차순으로 정렬한다
	sort ( begin ( dogs ), end ( dogs ) );

	for ( const Dog& dog : dogs )
		cout << dog << endl;		// "이름 - 나이" 를 출력

	save ( "소스.cpp" );
}




----------------------------------------------------------------------------
Wed Dec  4 13:16:30 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 12. 04  수		   C++월56수34				 (14주 2일)
//
// 진짜 프로그램 연습( 쬐끔만 )
//
// 12/9	 월 종강(15주 1일) - 강의정리, 책소개
// 12/11 수 시험3(15주 2일)
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include <algorithm>
#include <random>
#include <array>
#include <list>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution<int> uidAge ( 1, 20 );

class Dog {
	string name;
	int age;
public:
	Dog ( string s, int n ) : name{ s }, age{ n }{}
	
	bool operator<( const Dog& rhs ) const
	{
		return age < rhs.age;
	}

	friend ostream& operator<<( ostream&, const Dog& );
};

ostream& operator<<( ostream& os, const Dog& dog )
{
	os << dog.name << " - " << dog.age;
	return os;
}

int main ( )
{
	vector <Dog> dogs{ { "ㄱ", 1 },{"ㄴ", 3},{ "ㄷ", 7 },{"ㄹ", 4},{ "ㅁ", 2},{"ㅂ", 9},{ "ㅅ", 8 },{"ㅇ", 6},{ "ㅈ", 5 },{"ㅊ", 10} };		// [][][][][][][][][][]


	cout << "현재 용량 - " << dogs.capacity ( ) << endl;

	dogs.insert ( dogs.end(), Dog ( "댕댕이", 100 ) );

	cout << "현재 용량 - " << dogs.capacity ( ) << endl;

	// 개의 이름과 나이를 마음대로 설정하자

	// 나이 오름차순으로 정렬한다
	sort ( begin ( dogs ), end ( dogs ) );

	for ( const Dog& dog : dogs )
		cout << dog << endl;		// "이름 - 나이" 를 출력

	save ( "소스.cpp" );
}




----------------------------------------------------------------------------
Wed Dec  4 13:17:07 2019
----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// 2019. 12. 04  수		   C++월56수34				 (14주 2일)
//
// 진짜 프로그램 연습( 쬐끔만 )
//
// 12/9	 월 종강(15주 1일) - 강의정리, 책소개
// 12/11 수 시험3(15주 2일)
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include <algorithm>
#include <random>
#include <array>
#include <list>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution<int> uidAge ( 1, 20 );

class Dog {
	string name;
	int age;
public:
	Dog ( string s, int n ) : name{ s }, age{ n }{}
	
	bool operator<( const Dog& rhs ) const
	{
		return age < rhs.age;
	}

	friend ostream& operator<<( ostream&, const Dog& );
};

ostream& operator<<( ostream& os, const Dog& dog )
{
	os << dog.name << " - " << dog.age;
	return os;
}

int main ( )
{
	list <Dog> dogs{ { "ㄱ", 1 },{"ㄴ", 3},{ "ㄷ", 7 },{"ㄹ", 4},{ "ㅁ", 2},{"ㅂ", 9},{ "ㅅ", 8 },{"ㅇ", 6},{ "ㅈ", 5 },{"ㅊ", 10} };		// [][][][][][][][][][]

	dogs.insert ( dogs.end(), Dog ( "댕댕이", 100 ) );

	dogs.sort ( );

	for ( const Dog& dog : dogs )
		cout << dog << endl;		// "이름 - 나이" 를 출력

	save ( "소스.cpp" );
}

